[env]
friendbot = "https://friendbot-futurenet.stellar.org/"
network = "futurenet"
server = "https://horizon-futurenet.stellar.org/"

[env.futurenet]
friendbot = "https://friendbot-futurenet.stellar.org/"
network = "futurenet"
server = "https://horizon-futurenet.stellar.org/"

[env.standalone]
friendbot = "http://localhost:8000/friendbot"
network = "standalone"
server = "http://localhost:8000"

[tasks.run_standalone_server]
script = '''
  docker run --rm -it \
    -p 8000:8000 \
    --name stellar \
    stellar/quickstart:soroban-dev@sha256:a6b03cf6b0433c99f2f799b719f0faadbb79684b1b763e7674ba749fb0f648ee \
    --standalone \
    --enable-soroban-rpc
'''

[tasks.create_account_admin]
script = '''
  { ERR=$( { soroban config identity generate admin 1>&3 ; } 2>&1); } 3>&1
  if [ ! -z "$ERR" ]; then
    echo "$ERR"
    exit 1
  fi
  
  { ERR=$( { curl "${friendbot}?addr=$(soroban config identity address admin)" 1>&3 ; } 2>&1); } 3>&1
  if [ ! -z "$ERR" ]; then
    echo "$ERR"
    exit 1
  fi
'''

[tasks.create_account_players]
script = '''
  for PLAYER in 1 2 3
  do
    { ERR=$( { soroban config identity generate player_$PLAYER 1>&3 ; } 2>&1); } 3>&1
    if [ ! -z "$ERR" ]; then
      echo "$ERR"
      exit 1
    fi
    
    { ERR=$( { curl "${friendbot}?addr=$(soroban config identity address player_$PLAYER)" 1>&3 ; } 2>&1); } 3>&1
    if [ ! -z "$ERR" ]; then
      echo "$ERR"
      exit 1
    fi
  done
'''

[tasks.accounts]
dependencies = [
  "create_account_admin",
  "create_account_players"
]

[tasks.get_token]
script = '''
soroban lab token id --asset native --network ${network} > /tmp/token_id.txt
'''

[tasks.deploy]
script = '''
  ERR=$( { soroban contract deploy \
  --source admin \
  --wasm ../../target/wasm32-unknown-unknown/release/raffle.wasm \
  --network ${network} 1>/tmp/contract_id.txt ; } 2>&1)

  echo "$ERR"
  if [ ! -z "$ERR" ]; then
    exit 1
  fi
'''

[tasks.invoke_init]
script = '''
  { ERR=$( { soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source admin \
  --network ${network} \
  -- \
  init \
  --admin $(soroban config identity address admin) \
  --token $(cat /tmp/token_id.txt) \
  --max_winners_count 1 \
  --ticket_price 5001 1>&3 ; } 2>&1); } 3>&1

  echo "$ERR"
  if [ ! -z "$ERR" ]; then
    exit 1
  fi
'''

[tasks.invoke_buy_ticket]
script = '''
  for PLAYER in 1 2 3
  do
    { ERR=$( { soroban contract invoke \
    --id $(cat /tmp/contract_id.txt) \
    --source player_$PLAYER \
    --network ${network} \
    -- \
    buy_ticket \
    --by $(soroban config identity address player_$PLAYER) 1>&3 ; } 2>&1); } 3>&1
    
    echo "$ERR"
    if [ ! -z "$ERR" ]; then
      exit 1
    fi
  done
'''

[tasks.invoke_play_raffle]
script = '''
  { ERR=$( { soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source admin \
  --network ${network} \
  -- \
  play_raffle \
  --random_seed 1234 1>&3 ; } 2>&1); } 3>&1

  echo "$ERR"
  if [ ! -z "$ERR" ]; then
      exit 1
  fi
'''

[tasks.invoke_contract]
dependencies = [
  "invoke_init",
  "invoke_buy_ticket",
  "invoke_play_raffle"
]

# currently this only displays balance of each player, without checking who has the most
[tasks.get_balances]
script = '''
for PLAYER in 1 2 3
  do
    { ERR=$( { soroban contract invoke \
    --id $(cat /tmp/token_id.txt) \
    --network ${network} \
    -- \
    balance \
    --id $(soroban config identity address player_$PLAYER) 1>&3 ; } 2>&1); } 3>&1

    echo "$ERR"
    if [ ! -z "$ERR" ]; then
      exit 1
    fi
  done
'''

[tasks.run_test]
dependencies = [
  "accounts",
  "get_token",
  "deploy",
  "invoke_contract",
  "get_balances"
]
