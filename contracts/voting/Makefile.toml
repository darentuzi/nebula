[env]
friendbot = "https://friendbot-futurenet.stellar.org/"
network = "futurenet"

[env.futurenet]
friendbot = "https://friendbot-futurenet.stellar.org/"
network = "futurenet"

[env.standalone]
friendbot = "http://localhost:8000/friendbot"
network = "standalone"

[tasks.run_standalone_server]
script = '''
  docker run --rm -it \
    -p 8000:8000 \
    --name stellar \
    stellar/quickstart:soroban-dev@sha256:a6b03cf6b0433c99f2f799b719f0faadbb79684b1b763e7674ba749fb0f648ee \
    --standalone \
    --enable-soroban-rpc
'''

[tasks.create_account_admin]
script = '''
  soroban config identity generate admin
  curl "${friendbot}?addr=$(soroban config identity address admin)"
'''

[tasks.create_account_players]
script = '''
  for PLAYER in 1 2 3
  do
    soroban config identity generate player_$PLAYER
    curl "${friendbot}?addr=$(soroban config identity address player_$PLAYER)"
  done
'''

[tasks.accounts]
dependencies = [
  "create_account_admin",
  "create_account_players"
]

[tasks.deploy]
script = '''
  soroban contract deploy \
  --source admin \
  --wasm ../../target/wasm32-unknown-unknown/release/voting.wasm \
  --network ${network} > /tmp/contract_id.txt
'''

[tasks.invoke_init]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source admin \
  --network ${network} \
  -- \
  init \
  --admin $(soroban config identity address admin) \
  --voting_period_secs 3600 \
  --target_approval_rate_bps 50000 \
  --total_voters 3
'''

[tasks.invoke_create_proposal]
script = '''
  soroban contract invoke \
  --id $(cat /tmp/contract_id.txt) \
  --source admin \
  --network ${network} \
  -- \
  create_proposal \
  --id 1
'''

[tasks.invoke_vote]
script = '''
  for PLAYER in 1 2 3
  do
    soroban contract invoke \
    --id $(cat /tmp/contract_id.txt) \
    --source player_$PLAYER \
    --network ${network} \
    -- \
    vote \
    --voter $(soroban config identity address player_$PLAYER) \
    --id 1
  done
'''

[tasks.check_results]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! stellar_sdk = "0.1.3"
//! tokio = { version = "1", features = ["full"] }
//! stellar-xdr =  { version = "0.0.16", default-features = true, features = ["base64", "std"] }
//! reqwest = { version = "0.11", features = ["blocking"] }
//! envmnt = "*"
//! ```
use std::{process::Command, error::Error, str::FromStr};
use stellar_sdk::{CallBuilder, Server, utils::{Endpoint}};
use stellar_xdr::{Type, TypeVariant, TransactionResultMeta, TransactionResult, TransactionEnvelope};

fn main() {
    let s = String::from("https://horizon-futurenet.stellar.org/");
    let s = Server::new(s);

    let address_cmd = Command::new("soroban")
        .arg("config").arg("identity").arg("address").arg("player_2")
        .output()
        .expect("Could not get address");

    let address = String::from_utf8(address_cmd.stdout).unwrap().trim().to_owned();

    // Load transactions of an account
    let my_txs = s
        .transactions()
        .for_endpoint(Endpoint::Accounts(address))
        .call()
        .unwrap();

    let result_meta = my_txs._embedded.records[0].result_meta_xdr.to_string();
    println!("{}", result_meta);
    let typ = Type::from_xdr_base64(TypeVariant::from_str("TransactionResultMeta").unwrap(), result_meta).expect("Error parsing XDR");

    let decoded_result: &TransactionResultMeta = typ.value().downcast_ref().unwrap();
    print!("{}\n", env);
}
'''
